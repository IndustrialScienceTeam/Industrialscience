<!-- Ant Build file. Original file by the awesome bc team.-->
<project name="IndustrialScience" default="main" xmlns:sonar="antlib:org.sonar.ant">
	<property environment="env"/>
	<!-- Properties -->

	<dirname property="imported.basedir" file="${ant.file.IndustrialScience}" />
	<dirname file="${imported.basedir}" property="workspace"/>
	<property name="build.dir" value="${workspace}/Output" />
	<property name="src.dir" value="${workspace}/Industrialscience" />
	<property name="resources.dir" value="${src.dir}/resources" />

	<property name="download.dir" value="${workspace}/download" />

	<property name="classes.dir" value="${build.dir}/classes" />
	<property name="jar.dir" value="${workspace}/Output/jars" />

	<property name="forge.dir" value="${workspace}/forge" />
	<property name="mcp.dir" value="${forge.dir}/mcp" />

	<property name="mcpsrc.dir" value="${mcp.dir}/src" />

	<property name="mc.version" value="1.6.4" />
	<property name="forge.version" value="9.11.1.953" />
	<!-- <property name="project.version" value="0.0.0"/> -->

	<property name="industrialscience.name" value="industrialscience" />

	<property name="forge.name" value="minecraftforge-src-${mc.version}-${forge.version}.zip"/>
	
	<property name="sonar.jdbc.url" value="jdbc:mysql://localhost:3306/sonar?useUnicode=true&amp;characterEncoding=utf8" />
	<property name="sonar.jdbc.username" value="sonar" />
	<property name="sonar.jdbc.password" value="sonar" />

	<property name="sonar.projectKey" value="de.zsgn.industrialscience:ant" />
	<property name="sonar.projectName" value="The IndustrialScience mod." />
	<property name="sonar.projectVersion" value="1.0" />
	<property name="sonar.language" value="java" />
	<property name="sonar.sources" value="${mcpsrc.dir}/minecraft" />
	<property name="sonar.binaries" value="${mcp.dir}/bin/minecraft/**/*.class" />



	<available property="forge-exists" file="${download.dir}/${forge.name}"/>

	<condition property="out-of-date">
		<not>
			<and>
				<isset property="forge-exists"/>
				<available file="${mcpsrc.dir}"/>
			</and>
		</not>
	</condition>

	<mkdir dir="${download.dir}"/>

	<!-- Targets -->

	<!-- Clear build directory -->
	<target name="clean">
		<delete dir="${build.dir}"/>
	</target>

	<!-- Download necessary files -->
	<target name="download-files" depends="download-forge"/>

	<!-- Download forge (if it doesn't exist) -->
	<target name="download-forge" unless="forge-exists">
		<get src="http://files.minecraftforge.net/${forge.name}" dest="${download.dir}" usetimestamp="True"/>
	</target>

	<!-- Setup mcp and forge -->
	<target name="setup" depends="download-files" if="out-of-date">

		<unzip dest="${forge.dir}/.." src="${download.dir}/${forge.name}"/>

		<!-- Fix executable permissions -->
		<chmod dir="${forge.dir}" perm="ugo+rx" includes="**.sh"/>

		<!-- Install forge -->
		<exec dir="${forge.dir}" executable="cmd" osfamily="windows">
			<arg line="/c install.cmd"/>
		</exec>

		<exec dir="${forge.dir}" executable="sh" osfamily="unix">
			<arg value="install.sh"/>
		</exec>

	</target>

	<target name="clean-src">
		<delete verbose="true" failonerror="false">
			<fileset dir="${mcpsrc.dir}/minecraft">
				<present present="both" targetdir="${src.dir}/common" /> 
			</fileset>
		</delete>
	</target>
	<target name="copy-src" depends="clean-src">
		<!-- Copy sources -->
		<copy todir="${mcpsrc.dir}/minecraft" verbose="true">
			<fileset dir="${src.dir}/common"/>
			<filterset>
				<filter token="VERSION" value="${project.complete.version}" />
				<filter token="BUILD_NUMBER" value="${build.number}" />
			</filterset>
		</copy>
	</target>

	<target name="compile" depends="setup,copy-src">

		<mkdir dir="${classes.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="${classes.dir}" includes="**/*"/>
		</delete>

		<!-- Recompile -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c recompile.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg value="recompile.sh"/>
		</exec>

		<!-- Check for failure -->
		<fail message="MCP failed to build">
			<condition>
				<resourcecontains resource="${mcp.dir}/logs/client_compile.log" substring="error:"/>
			</condition>
		</fail>

	</target>

	<target name="reobf" depends="compile">

		<!-- Reobfuscate -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c reobfuscate_srg.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg value="reobfuscate_srg.sh"/>
		</exec>

		<!-- Copy classes -->
		<copy todir="${classes.dir}">
			<fileset dir="${mcp.dir}/reobf/minecraft"/>
		</copy>

		<!-- Copy resources -->
		<copy todir="${classes.dir}">
			<fileset dir="${resources.dir}">
				<exclude name="build.xml"/>
			</fileset>
		</copy>

		<!-- Copy localizations -->
		<copy todir="${classes.dir}" failonerror="false">
			<fileset dir="${lang.dir}">
				<exclude name="README.md"/>
			</fileset>
		</copy>

		<!-- Reset src dir to post-forge-install state -->
		<delete dir="${mcpsrc.dir}/minecraft/industrialscience"/>
		<delete dir="${mcpsrc.dir}/minecraft/mods"/>
		<delete dir="${mcpsrc.dir}/minecraft/appeng"/>
		<delete dir="${mcpsrc.dir}/minecraft/tconstruct"/>
		<delete dir="${mcpsrc.dir}/minecraft/ic2"/>

	</target>

	<!-- Package the compiled files -->
	<target name="package" depends="reobf">

		<mkdir dir="${jar.dir}"/>
		<delete includeemptydirs="true">
			<fileset dir="${jar.dir}" includes="**/*"/>
		</delete>
		
		<jar destfile="${jar.dir}/${industrialscience.name}-${mc.version}-${env.BUILD_NUMBER}.jar" basedir="${classes.dir}"/>

	</target>

	<target name="run">

		<!-- Start Client -->
		<exec dir="${mcp.dir}" executable="cmd" osfamily="windows">
			<arg line="/c startclient.bat"/>
		</exec>

		<exec dir="${mcp.dir}" executable="sh" osfamily="unix">
			<arg value="startclient.sh"/>
		</exec>

	</target>

	<target name="test-run" depends="compile,run"/>
	<target name="sonar">
    <taskdef uri="antlib:org.sonar.ant" resource="org/sonar/ant/antlib.xml">
        <classpath path="sonarlib/*.jar" />
    </taskdef>
 
    <!-- Execute Sonar -->
    <sonar:sonar />
</target>

	<!-- Default target to run -->
	<target name="main" depends="package"/>

</project>